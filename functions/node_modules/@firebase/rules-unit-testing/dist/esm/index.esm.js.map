{"version":3,"file":"index.esm.js","sources":["../../src/impl/url.ts","../../src/impl/discovery.ts","../../src/impl/test_environment.ts","../../src/impl/rules.ts","../../src/initialize.ts","../../src/util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HostAndPort } from '../public_types';\n\n/**\n * Return a connectable hostname, replacing wildcard 0.0.0.0 or :: with loopback\n * addresses 127.0.0.1 / ::1 correspondingly. See below for why this is needed:\n * https://github.com/firebase/firebase-tools-ui/issues/286\n *\n * This assumes emulators are running on the same device as fallbackHost (e.g.\n * hub), which should hold if both are started from the same CLI command.\n * @private\n */\nexport function fixHostname(host: string, fallbackHost?: string): string {\n  host = host.replace('[', '').replace(']', ''); // Remove IPv6 brackets\n  if (host === '0.0.0.0') {\n    host = fallbackHost || '127.0.0.1';\n  } else if (host === '::') {\n    host = fallbackHost || '::1';\n  }\n  return host;\n}\n\n/**\n * Create a URL with host, port, and path. Handles IPv6 bracketing correctly.\n * @private\n */\nexport function makeUrl(hostAndPort: HostAndPort | string, path: string): URL {\n  if (typeof hostAndPort === 'object') {\n    const { host, port } = hostAndPort;\n    if (host.includes(':')) {\n      hostAndPort = `[${host}]:${port}`;\n    } else {\n      hostAndPort = `${host}:${port}`;\n    }\n  }\n  const url = new URL(`http://${hostAndPort}/`);\n  url.pathname = path;\n  return url;\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EmulatorConfig, HostAndPort } from '../public_types';\nimport nodeFetch from 'node-fetch';\nimport { makeUrl, fixHostname } from './url';\n\n/**\n * Use the Firebase Emulator hub to discover other running emulators.\n *\n * @param hub the host and port where the Emulator Hub is running\n * @private\n */\nexport async function discoverEmulators(\n  hub: HostAndPort,\n  fetch: typeof nodeFetch = nodeFetch\n): Promise<DiscoveredEmulators> {\n  const res = await fetch(makeUrl(hub, '/emulators'));\n  if (!res.ok) {\n    throw new Error(\n      `HTTP Error ${res.status} when attempting to reach Emulator Hub at ${res.url}, are you sure it is running?`\n    );\n  }\n\n  const emulators: DiscoveredEmulators = {};\n\n  const data = await res.json();\n\n  if (data.database) {\n    emulators.database = {\n      host: data.database.host,\n      port: data.database.port\n    };\n  }\n\n  if (data.firestore) {\n    emulators.firestore = {\n      host: data.firestore.host,\n      port: data.firestore.port\n    };\n  }\n\n  if (data.storage) {\n    emulators.storage = {\n      host: data.storage.host,\n      port: data.storage.port\n    };\n  }\n\n  if (data.hub) {\n    emulators.hub = {\n      host: data.hub.host,\n      port: data.hub.port\n    };\n  }\n  return emulators;\n}\n\n/**\n * @private\n */\nexport interface DiscoveredEmulators {\n  database?: HostAndPort;\n  firestore?: HostAndPort;\n  storage?: HostAndPort;\n  hub?: HostAndPort;\n}\n\n/**\n * @private\n */\nexport function getEmulatorHostAndPort(\n  emulator: keyof DiscoveredEmulators,\n  conf?: EmulatorConfig,\n  discovered?: DiscoveredEmulators\n) {\n  if (conf && ('host' in conf || 'port' in conf)) {\n    const { host, port } = conf;\n    if (host || port) {\n      if (!host || !port) {\n        throw new Error(\n          `Invalid configuration ${emulator}.host=${host} and ${emulator}.port=${port}. ` +\n            'If either parameter is supplied, both must be defined.'\n        );\n      }\n      if (discovered && !discovered[emulator]) {\n        console.warn(\n          `Warning: config for the ${emulator} emulator is specified, but the Emulator hub ` +\n            'reports it as not running. This may lead to errors such as connection refused.'\n        );\n      }\n      return {\n        host: fixHostname(conf.host, discovered?.hub?.host),\n        port: conf.port\n      };\n    }\n  }\n  const envVar = EMULATOR_HOST_ENV_VARS[emulator];\n  const fallback = discovered?.[emulator] || emulatorFromEnvVar(envVar);\n  if (fallback) {\n    if (discovered && !discovered[emulator]) {\n      console.warn(\n        `Warning: the environment variable ${envVar} is set, but the Emulator hub reports the ` +\n          `${emulator} emulator as not running. This may lead to errors such as connection refused.`\n      );\n    }\n    return {\n      host: fixHostname(fallback.host, discovered?.hub?.host),\n      port: fallback.port\n    };\n  }\n}\n\n// Visible for testing.\nexport const EMULATOR_HOST_ENV_VARS = {\n  'database': 'FIREBASE_DATABASE_EMULATOR_HOST',\n  'firestore': 'FIRESTORE_EMULATOR_HOST',\n  'hub': 'FIREBASE_EMULATOR_HUB',\n  'storage': 'FIREBASE_STORAGE_EMULATOR_HOST'\n};\n\nfunction emulatorFromEnvVar(envVar: string): HostAndPort | undefined {\n  const hostAndPort = process.env[envVar];\n  if (!hostAndPort) {\n    return undefined;\n  }\n\n  let parsed: URL;\n  try {\n    parsed = new URL(`http://${hostAndPort}`);\n  } catch {\n    throw new Error(\n      `Invalid format in environment variable ${envVar}=${hostAndPort} (expected host:port)`\n    );\n  }\n  let host = parsed.hostname;\n  const port = Number(parsed.port || '80');\n  if (!Number.isInteger(port)) {\n    throw new Error(\n      `Invalid port in environment variable ${envVar}=${hostAndPort}`\n    );\n  }\n  return { host, port };\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fetch from 'node-fetch';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/database';\nimport 'firebase/compat/storage';\n\nimport {\n  HostAndPort,\n  RulesTestContext,\n  RulesTestEnvironment,\n  TokenOptions\n} from '../public_types';\n\nimport { DiscoveredEmulators } from './discovery';\nimport { makeUrl } from './url';\n\n/**\n * An implementation of {@code RulesTestEnvironment}. This is private to hide the constructor,\n * which should never be directly called by the developer.\n * @private\n */\nexport class RulesTestEnvironmentImpl implements RulesTestEnvironment {\n  private contexts = new Set<RulesTestContextImpl>();\n  private destroyed = false;\n\n  constructor(\n    readonly projectId: string,\n    readonly emulators: DiscoveredEmulators\n  ) {}\n\n  authenticatedContext(\n    user_id: string,\n    tokenOptions?: TokenOptions\n  ): RulesTestContext {\n    this.checkNotDestroyed();\n    return this.createContext({\n      ...tokenOptions,\n      sub: user_id,\n      user_id: user_id\n    });\n  }\n\n  unauthenticatedContext(): RulesTestContext {\n    this.checkNotDestroyed();\n    return this.createContext(/* authToken = */ undefined);\n  }\n\n  async withSecurityRulesDisabled(\n    callback: (context: RulesTestContext) => Promise<void>\n  ): Promise<void> {\n    this.checkNotDestroyed();\n    // The \"owner\" token is recognized by the emulators as a special value that bypasses Security\n    // Rules. This should only ever be used in withSecurityRulesDisabled.\n    // If you're reading this and thinking about doing this in your own app / tests / scripts, think\n    // twice. Instead, just use withSecurityRulesDisabled for unit testing OR connect your Firebase\n    // Admin SDKs to the emulators for integration testing via environment variables.\n    // See: https://firebase.google.com/docs/emulator-suite/connect_firestore#admin_sdks\n    const context = this.createContext('owner');\n    try {\n      await callback(context);\n    } finally {\n      // We eagarly clean up this context to actively prevent misuse outside of the callback, e.g.\n      // storing the context in a variable.\n      context.cleanup();\n      this.contexts.delete(context);\n    }\n  }\n\n  private createContext(\n    authToken: string | firebase.EmulatorMockTokenOptions | undefined\n  ): RulesTestContextImpl {\n    const context = new RulesTestContextImpl(\n      this.projectId,\n      this.emulators,\n      authToken\n    );\n    this.contexts.add(context);\n    return context;\n  }\n\n  clearDatabase(): Promise<void> {\n    this.checkNotDestroyed();\n    return this.withSecurityRulesDisabled(context => {\n      return context.database().ref('/').set(null);\n    });\n  }\n\n  async clearFirestore(): Promise<void> {\n    this.checkNotDestroyed();\n    assertEmulatorRunning(this.emulators, 'firestore');\n\n    const resp = await fetch(\n      makeUrl(\n        this.emulators.firestore,\n        `/emulator/v1/projects/${this.projectId}/databases/(default)/documents`\n      ),\n      {\n        method: 'DELETE'\n      }\n    );\n\n    if (!resp.ok) {\n      throw new Error(await resp.text());\n    }\n  }\n\n  clearStorage(): Promise<void> {\n    this.checkNotDestroyed();\n    return this.withSecurityRulesDisabled(async context => {\n      const { items } = await context.storage().ref().listAll();\n      await Promise.all(\n        items.map(item => {\n          return item.delete();\n        })\n      );\n    });\n  }\n\n  async cleanup(): Promise<void> {\n    this.destroyed = true;\n    this.contexts.forEach(context => {\n      context.envDestroyed = true;\n      context.cleanup();\n    });\n    this.contexts.clear();\n  }\n\n  private checkNotDestroyed() {\n    if (this.destroyed) {\n      throw new Error(\n        'This RulesTestEnvironment has already been cleaned up. ' +\n          '(This may indicate a leak or missing `await` in your test cases. If you do intend to ' +\n          'perform more tests, please call cleanup() later or create another RulesTestEnvironment.)'\n      );\n    }\n  }\n}\n/**\n * An implementation of {@code RulesTestContext}. This is private to hide the constructor,\n * which should never be directly called by the developer.\n * @private\n */\nclass RulesTestContextImpl implements RulesTestContext {\n  private app?: firebase.app.App;\n  private destroyed = false;\n  envDestroyed = false;\n\n  constructor(\n    readonly projectId: string,\n    readonly emulators: DiscoveredEmulators,\n    readonly authToken: firebase.EmulatorMockTokenOptions | string | undefined\n  ) {}\n\n  cleanup() {\n    this.destroyed = true;\n    this.app?.delete();\n\n    this.app = undefined;\n  }\n\n  firestore(\n    settings?: firebase.firestore.Settings\n  ): firebase.firestore.Firestore {\n    assertEmulatorRunning(this.emulators, 'firestore');\n    const firestore = this.getApp().firestore();\n    if (settings) {\n      firestore.settings(settings);\n    }\n    firestore.useEmulator(\n      this.emulators.firestore.host,\n      this.emulators.firestore.port,\n      { mockUserToken: this.authToken }\n    );\n    return firestore;\n  }\n  database(databaseURL?: string): firebase.database.Database {\n    assertEmulatorRunning(this.emulators, 'database');\n    if (!databaseURL) {\n      const url = makeUrl(this.emulators.database, '');\n      // Make sure to set the namespace equal to projectId -- otherwise the RTDB SDK will by default\n      // use `${projectId}-default-rtdb`, which is treated as a different DB by the RTDB emulator\n      // (and thus WON'T apply any rules set for the `projectId` DB during initialization).\n      url.searchParams.append('ns', this.projectId);\n      databaseURL = url.toString();\n    }\n    const database = this.getApp().database(databaseURL);\n    database.useEmulator(\n      this.emulators.database.host,\n      this.emulators.database.port,\n      { mockUserToken: this.authToken }\n    );\n    return database;\n  }\n  storage(bucketUrl = `gs://${this.projectId}`): firebase.storage.Storage {\n    assertEmulatorRunning(this.emulators, 'storage');\n    const storage = this.getApp().storage(bucketUrl);\n    storage.useEmulator(\n      this.emulators.storage.host,\n      this.emulators.storage.port,\n      { mockUserToken: this.authToken }\n    );\n    return storage;\n  }\n\n  private getApp(): firebase.app.App {\n    if (this.envDestroyed) {\n      throw new Error(\n        'This RulesTestContext is no longer valid because its RulesTestEnvironment has been ' +\n          'cleaned up. (This may indicate a leak or missing `await` in your test cases.)'\n      );\n    }\n    if (this.destroyed) {\n      throw new Error(\n        'This RulesTestContext is no longer valid. When using withSecurityRulesDisabled, ' +\n          'make sure to perform all operations on the context within the callback function and ' +\n          'return a Promise that resolves when the operations are done.'\n      );\n    }\n    if (!this.app) {\n      this.app = firebase.initializeApp(\n        { projectId: this.projectId },\n        `_Firebase_RulesUnitTesting_${Date.now()}_${Math.random()}`\n      );\n    }\n    return this.app;\n  }\n}\n\nexport function assertEmulatorRunning<E extends keyof DiscoveredEmulators>(\n  emulators: DiscoveredEmulators,\n  emulator: E\n): asserts emulators is Record<E, HostAndPort> {\n  if (!emulators[emulator]) {\n    if (emulators.hub) {\n      throw new Error(\n        `The ${emulator} emulator is not running (according to Emulator hub). To force ` +\n          'connecting anyway, please specify its host and port in initializeTestEnvironment({...}).'\n      );\n    } else {\n      throw new Error(\n        `The host and port of the ${emulator} emulator must be specified. (You may wrap the test ` +\n          \"script with `firebase emulators:exec './your-test-script'` to enable automatic \" +\n          `discovery, or specify manually via initializeTestEnvironment({${emulator}: {host, port}}).`\n      );\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HostAndPort } from '../public_types';\nimport { makeUrl } from './url';\nimport fetch from 'node-fetch';\n\n/**\n * @private\n */\nexport async function loadDatabaseRules(\n  hostAndPort: HostAndPort,\n  databaseName: string,\n  rules: string\n): Promise<void> {\n  const url = makeUrl(hostAndPort, '/.settings/rules.json');\n  url.searchParams.append('ns', databaseName);\n  const resp = await fetch(url, {\n    method: 'PUT',\n    headers: { Authorization: 'Bearer owner' },\n    body: rules\n  });\n\n  if (!resp.ok) {\n    throw new Error(await resp.text());\n  }\n}\n\n/**\n * @private\n */\nexport async function loadFirestoreRules(\n  hostAndPort: HostAndPort,\n  projectId: string,\n  rules: string\n): Promise<void> {\n  const resp = await fetch(\n    makeUrl(hostAndPort, `/emulator/v1/projects/${projectId}:securityRules`),\n    {\n      method: 'PUT',\n      body: JSON.stringify({\n        rules: {\n          files: [{ content: rules }]\n        }\n      })\n    }\n  );\n\n  if (!resp.ok) {\n    throw new Error(await resp.text());\n  }\n}\n\n/**\n * @private\n */\nexport async function loadStorageRules(\n  hostAndPort: HostAndPort,\n  rules: string\n): Promise<void> {\n  const resp = await fetch(makeUrl(hostAndPort, '/internal/setRules'), {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      rules: {\n        files: [{ name: 'storage.rules', content: rules }]\n      }\n    })\n  });\n  if (!resp.ok) {\n    throw new Error(await resp.text());\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RulesTestEnvironment, TestEnvironmentConfig } from './public_types';\nimport {\n  DiscoveredEmulators,\n  discoverEmulators,\n  getEmulatorHostAndPort\n} from './impl/discovery';\nimport {\n  assertEmulatorRunning,\n  RulesTestEnvironmentImpl\n} from './impl/test_environment';\nimport {\n  loadDatabaseRules,\n  loadFirestoreRules,\n  loadStorageRules\n} from './impl/rules';\n\n/**\n * Initializes a test environment for rules unit testing. Call this function first for test setup.\n *\n * Requires emulators to be running. This function tries to discover those emulators via environment\n * variables or through the Firebase Emulator hub if hosts and ports are unspecified. It is strongly\n * recommended to specify security rules for emulators used for testing. See minimal example below.\n *\n * @param config - the configuration for emulators. Most fields are optional if they can be discovered\n * @returns a promise that resolves with an environment ready for testing, or rejects on error.\n * @public\n * @example\n * ```javascript\n * const testEnv = await initializeTestEnvironment({\n *   firestore: {\n *     rules: fs.readFileSync(\"/path/to/firestore.rules\", \"utf8\"), // Load rules from file\n *     // host and port can be omitted if they can be discovered from the hub.\n *   },\n *   // ...\n * });\n * ```\n */\nexport async function initializeTestEnvironment(\n  config: TestEnvironmentConfig\n): Promise<RulesTestEnvironment> {\n  const projectId = config.projectId || process.env.GCLOUD_PROJECT;\n  if (!projectId) {\n    throw new Error(\n      'Missing projectId option or env var GCLOUD_PROJECT! Please specify the projectId either ' +\n        'way.\\n(A demo-* projectId is strongly recommended for unit tests, such as \"demo-test\".)'\n    );\n  }\n  const hub = getEmulatorHostAndPort('hub', config.hub);\n  let discovered = hub ? { ...(await discoverEmulators(hub)), hub } : undefined;\n\n  const emulators: DiscoveredEmulators = {};\n  if (hub) {\n    emulators.hub = hub;\n  }\n\n  for (const emulator of SUPPORTED_EMULATORS) {\n    const hostAndPort = getEmulatorHostAndPort(\n      emulator,\n      config[emulator],\n      discovered\n    );\n    if (hostAndPort) {\n      emulators[emulator] = hostAndPort;\n    }\n  }\n\n  if (config.database?.rules) {\n    assertEmulatorRunning(emulators, 'database');\n    await loadDatabaseRules(\n      emulators.database,\n      projectId,\n      config.database.rules\n    );\n  }\n  if (config.firestore?.rules) {\n    assertEmulatorRunning(emulators, 'firestore');\n    await loadFirestoreRules(\n      emulators.firestore,\n      projectId,\n      config.firestore.rules\n    );\n  }\n  if (config.storage?.rules) {\n    assertEmulatorRunning(emulators, 'storage');\n    await loadStorageRules(emulators.storage, config.storage.rules);\n  }\n\n  return new RulesTestEnvironmentImpl(projectId, emulators);\n}\n\nconst SUPPORTED_EMULATORS = ['database', 'firestore', 'storage'] as const;\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  EMULATOR_HOST_ENV_VARS,\n  getEmulatorHostAndPort\n} from './impl/discovery';\nimport { fixHostname, makeUrl } from './impl/url';\nimport { HostAndPort } from './public_types';\nimport fetch from 'node-fetch';\n\n/**\n * Run a setup function with background Cloud Functions triggers disabled. This can be used to\n * import data into the Realtime Database or Cloud Firestore emulator without triggering locally\n * emulated Cloud Functions.\n *\n * This method only works with Firebase CLI version 8.13.0 or higher. This overload works only if\n * the Emulator hub host:port is specified by the environment variable FIREBASE_EMULATOR_HUB.\n *\n * @param fn - a function which may be sync or async (returns a promise)\n * @public\n */\nexport async function withFunctionTriggersDisabled<TResult>(\n  fn: () => TResult | Promise<TResult>\n): Promise<TResult>;\n\n/**\n * Run a setup function with background Cloud Functions triggers disabled. This can be used to\n * import data into the Realtime Database or Cloud Firestore emulator without triggering locally\n * emulated Cloud Functions.\n *\n * This method only works with Firebase CLI version 8.13.0 or higher. The Emulator hub must be\n * running, which host and port are specified in this overload.\n *\n * @param fn - a function which may be sync or async (returns a promise)\n * @param hub - the host and port of the Emulator Hub (ex: `{host: 'localhost', port: 4400}`)\n * @public\n */\nexport async function withFunctionTriggersDisabled<TResult>(\n  hub: { host: string; port: number },\n  fn: () => TResult | Promise<TResult>\n): Promise<TResult>;\n\nexport async function withFunctionTriggersDisabled<TResult>(\n  fnOrHub: { host: string; port: number } | (() => TResult | Promise<TResult>),\n  maybeFn?: () => TResult | Promise<TResult>\n): Promise<TResult> {\n  let hub: HostAndPort | undefined;\n  if (typeof fnOrHub === 'function') {\n    maybeFn = fnOrHub;\n    hub = getEmulatorHostAndPort('hub');\n  } else {\n    hub = getEmulatorHostAndPort('hub', fnOrHub);\n    if (!maybeFn) {\n      throw new Error('The callback function must be specified!');\n    }\n  }\n  if (!hub) {\n    throw new Error(\n      'Please specify the Emulator Hub host and port via arguments or set the environment ' +\n        `varible ${EMULATOR_HOST_ENV_VARS.hub}!`\n    );\n  }\n\n  hub.host = fixHostname(hub.host);\n  makeUrl(hub, '/functions/disableBackgroundTriggers');\n  // Disable background triggers\n  const disableRes = await fetch(\n    makeUrl(hub, '/functions/disableBackgroundTriggers'),\n    {\n      method: 'PUT'\n    }\n  );\n  if (!disableRes.ok) {\n    throw new Error(\n      `HTTP Error ${disableRes.status} when disabling functions triggers, are you using firebase-tools 8.13.0 or higher?`\n    );\n  }\n\n  // Run the user's function\n  let result: TResult | undefined = undefined;\n  try {\n    result = await maybeFn();\n  } finally {\n    // Re-enable background triggers\n    const enableRes = await fetch(\n      makeUrl(hub, '/functions/enableBackgroundTriggers'),\n      {\n        method: 'PUT'\n      }\n    );\n\n    if (!enableRes.ok) {\n      throw new Error(\n        `HTTP Error ${enableRes.status} when enabling functions triggers, are you using firebase-tools 8.13.0 or higher?`\n      );\n    }\n  }\n\n  // Return the user's function result\n  return result;\n}\n\n/**\n * Assert the promise to be rejected with a \"permission denied\" error.\n *\n * Useful to assert a certain request to be denied by Security Rules. See example below.\n * This function recognizes permission-denied errors from Database, Firestore, and Storage JS SDKs.\n *\n * @param pr - the promise to be asserted\n * @returns a Promise that is fulfilled if pr is rejected with \"permission denied\". If pr is\n *          rejected with any other error or resolved, the returned promise rejects.\n * @public\n * @example\n * ```javascript\n * const unauthed = testEnv.unauthenticatedContext();\n * await assertFails(get(doc(unauthed.firestore(), '/private/doc'), { ... });\n * ```\n */\nexport function assertFails(pr: Promise<any>): Promise<any> {\n  return pr.then(\n    () => {\n      return Promise.reject(\n        new Error('Expected request to fail, but it succeeded.')\n      );\n    },\n    (err: any) => {\n      const errCode = err?.code?.toLowerCase() || '';\n      const errMessage = err?.message?.toLowerCase() || '';\n      const isPermissionDenied =\n        errCode === 'permission-denied' ||\n        errCode === 'permission_denied' ||\n        errMessage.indexOf('permission_denied') >= 0 ||\n        errMessage.indexOf('permission denied') >= 0 ||\n        // Storage permission errors contain message: (storage/unauthorized)\n        errMessage.indexOf('unauthorized') >= 0;\n\n      if (!isPermissionDenied) {\n        return Promise.reject(\n          new Error(\n            `Expected PERMISSION_DENIED but got unexpected error: ${err}`\n          )\n        );\n      }\n      return err;\n    }\n  );\n}\n\n/**\n * Assert the promise to be successful.\n *\n * This is a no-op function returning the passed promise as-is, but can be used for documentational\n * purposes in test code to emphasize that a certain request should succeed (e.g. allowed by rules).\n *\n * @public\n * @example\n * ```javascript\n * const alice = testEnv.authenticatedContext('alice');\n * await assertSucceeds(get(doc(alice.firestore(), '/doc/readable/by/alice'), { ... });\n * ```\n */\nexport function assertSucceeds<T>(pr: Promise<T>): Promise<T> {\n  return pr;\n}\n"],"names":["fetch","nodeFetch"],"mappings":"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"}